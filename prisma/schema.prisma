// Prisma schema for Supabase Postgres
// Generated by updating repository to use database instead of local storage

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum ActionType {
  CRIAR_CONTEUDO
  REVISAR_CONTEUDO
  PLANEJAR_CONTEUDO
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Team {
  id           String          @id @default(cuid())
  name         String
  code         String          @unique
  adminId      String
  admin        User            @relation("TeamAdmin", fields: [adminId], references: [id])
  members      User[]          @relation("TeamMembers")
  plan         Json
  credits      Json
  brands       Brand[]
  themes       StrategicTheme[]
  personas     Persona[]
  actions      Action[]
  notifications Notification[]
  joinRequests  JoinRequest[]
  temporaryContents TemporaryContent[]
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  phone     String?
  state     String?
  city      String?
  role      UserRole   @default(MEMBER)
  status    UserStatus @default(PENDING)
  teamId    String?
  team      Team?      @relation("TeamMembers", fields: [teamId], references: [id])
  adminTeams Team[]    @relation("TeamAdmin")
  actions   Action[]
  notifications Notification[]
  joinRequests JoinRequest[]
  brands   Brand[]
  themes   StrategicTheme[]
  personas Persona[]
  temporaryContents TemporaryContent[]
}

model Brand {
  id         String   @id @default(cuid())
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  responsible String
  segment    String
  values     String
  keywords   String
  goals      String
  inspirations String
  successMetrics String
  references String
  specialDates String
  sectorRestrictions String
  promise    String
  crisisInfo String
  milestones String
  collaborations String
  restrictions String
  moodboard   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  themes     StrategicTheme[]
  personas   Persona[]
  actions    Action[]
}

model StrategicTheme {
  id            String   @id @default(cuid())
  teamId        String
  team          Team     @relation(fields: [teamId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  brandId       String
  brand         Brand    @relation(fields: [brandId], references: [id])
  title         String
  description   String
  colorPalette  String
  toneOfVoice   String
  targetAudience String
  hashtags      String
  objectives    String
  contentFormat String
  macroThemes   String
  bestFormats   String
  platforms     String
  expectedAction String
  additionalInfo String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Persona {
  id              String   @id @default(cuid())
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  brandId         String
  brand           Brand    @relation(fields: [brandId], references: [id])
  name            String
  gender          String
  age             String
  location        String
  role            String
  hobbies         String
  consumptionHabits String
  goals           String
  challenges      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Action {
  id        String   @id @default(cuid())
  type      ActionType
  brandId   String
  brand     Brand    @relation(fields: [brandId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  details   Json?
  result    Json?
  status    String   @default("Em revisão") // "Em revisão", "Aprovado", "Rejeitado"
  approved  Boolean  @default(false)
  revisions Int      @default(0)
  temporaryContents TemporaryContent[]
}

model TemporaryContent {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id])
  actionId    String?  // Referência à ação que gerou este conteúdo
  action      Action?  @relation(fields: [actionId], references: [id])
  imageUrl    String
  title       String
  body        String
  hashtags    Json     // Array de hashtags
  revisions   Int      @default(0)
  brand       String?
  theme       String?
  originalId  String?  // Para rastrear revisões
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime // Conteúdo temporário expira após um tempo

  @@index([actionId])
  @@index([userId, teamId])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model JoinRequest {
  id        String    @id @default(cuid())
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  status    RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
}
