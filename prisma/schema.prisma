generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Team {
  id                String           @id @default(cuid())
  name              String
  code              String           @unique
  displayCode       String
  adminId           String
  plan              Json?
  credits           Json
  totalContents     Int              @default(0)
  totalBrands       Int              @default(0)
  createdAt         DateTime         @default(now())
  isTrialActive     Boolean          @default(true)
  trialEndsAt       DateTime?
  updatedAt         DateTime         @default(now()) @updatedAt
  currentPlanId     String?
  dailyUsageCount   Int              @default(0)
  monthlyUsageCount Int              @default(0)
  lastActivityDate  DateTime?
  currentMonthYear  String?
  actions           Action[]
  brands            Brand[]
  joinRequests      JoinRequest[]
  notifications     Notification[]
  personas          Persona[]
  themes            StrategicTheme[]
  admin             User             @relation("TeamAdmin", fields: [adminId], references: [id])
  currentPlan       Plan?            @relation("TeamCurrentPlan", fields: [currentPlanId], references: [id])
  members           User[]           @relation("TeamMembers")
  subscriptions     Subscription[]
}

model User {
  id                String           @id @default(cuid())
  name              String
  email             String           @unique
  password          String
  phone             String?
  state             String?
  city              String?
  role              UserRole         @default(WITHOUT_TEAM)
  status            UserStatus       @default(NO_TEAM)
  teamId            String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  tutorialCompleted Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  actions           Action[]
  brands            Brand[]
  joinRequests      JoinRequest[]
  notifications     Notification[]
  personas          Persona[]
  themes            StrategicTheme[]
  adminTeams        Team[]           @relation("TeamAdmin")
  team              Team?            @relation("TeamMembers", fields: [teamId], references: [id])
}

model Brand {
  id             String           @id @default(cuid())
  teamId         String
  userId         String
  name           String
  responsible    String
  segment        String
  values         String
  keywords       String
  goals          String
  inspirations   String
  successMetrics String
  references     String
  specialDates   String
  promise        String
  crisisInfo     String
  milestones     String
  collaborations String
  restrictions   String
  moodboard      Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  colorPalette   Json?
  logo           Json?
  referenceImage Json?
  actions        Action[]
  team           Team             @relation(fields: [teamId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  personas       Persona[]
  themes         StrategicTheme[]

  @@index([teamId])
}

model StrategicTheme {
  id             String   @id @default(cuid())
  teamId         String
  userId         String
  brandId        String
  title          String
  description    String
  colorPalette   String
  toneOfVoice    String
  targetAudience String
  hashtags       String
  objectives     String
  contentFormat  String
  macroThemes    String
  bestFormats    String
  platforms      String
  expectedAction String
  additionalInfo String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  brand          Brand    @relation(fields: [brandId], references: [id])
  team           Team     @relation(fields: [teamId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@index([brandId])
}

model Persona {
  id                        String   @id @default(cuid())
  teamId                    String
  userId                    String
  brandId                   String
  name                      String
  gender                    String
  age                       String
  location                  String
  professionalContext       String   @map("role")
  beliefsAndInterests       String   @map("hobbies")
  contentConsumptionRoutine String   @map("consumptionHabits")
  mainGoal                  String   @map("goals")
  challenges                String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  interestTriggers          String   @default("")
  preferredToneOfVoice      String   @default("")
  purchaseJourneyStage      String   @default("")
  brand                     Brand    @relation(fields: [brandId], references: [id])
  team                      Team     @relation(fields: [teamId], references: [id])
  user                      User     @relation(fields: [userId], references: [id])

  @@index([brandId])
}

model Action {
  id        String     @id @default(cuid())
  type      ActionType
  brandId   String
  teamId    String
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  details   Json?
  result    Json?
  status    String     @default("Em revis√£o")
  approved  Boolean    @default(false)
  revisions Int        @default(0)
  brand     Brand      @relation(fields: [brandId], references: [id])
  team      Team       @relation(fields: [teamId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String
  userId    String
  teamId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_Notification_userId")
}

model JoinRequest {
  id        String        @id @default(cuid())
  teamId    String
  userId    String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  team      Team          @relation(fields: [teamId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model Plan {
  id                       String         @id @default(cuid())
  name                     String         @unique
  displayName              String
  price                    Float
  trialDays                Int            @default(0)
  maxMembers               Int
  maxBrands                Int
  maxStrategicThemes       Int
  maxPersonas              Int
  quickContentCreations    Int
  customContentSuggestions Int
  contentPlans             Int
  contentReviews           Int
  isActive                 Boolean        @default(true)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  teamsUsingPlan           Team[]         @relation("TeamCurrentPlan")
  subscriptions            Subscription[]
}

model Subscription {
  id           String             @id @default(cuid())
  teamId       String
  planId       String
  status       SubscriptionStatus @default(TRIAL)
  startDate    DateTime           @default(now())
  endDate      DateTime?
  trialEndDate DateTime?
  isActive     Boolean            @default(true)
  canceledAt   DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  plan         Plan               @relation(fields: [planId], references: [id])
  team         Team               @relation(fields: [teamId], references: [id])

  @@unique([teamId, planId])
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELED
  EXPIRED
  PAYMENT_PENDING
}

enum UserRole {
  ADMIN
  MEMBER
  WITHOUT_TEAM
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
  NO_TEAM
}

enum ActionType {
  CRIAR_CONTEUDO
  REVISAR_CONTEUDO
  PLANEJAR_CONTEUDO
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
